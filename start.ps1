# Script de inicio r√°pido para Backend-Optimizacion (PowerShell)
Write-Host "üöÄ Iniciando Backend-Optimizacion con Docker..." -ForegroundColor Green

# Verificar si Docker est√° ejecut√°ndose
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker est√° ejecut√°ndose" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° ejecut√°ndose. Por favor, inicia Docker Desktop." -ForegroundColor Red
    exit 1
}

# Verificar si existe el archivo .env
if (-not (Test-Path ".env")) {
    Write-Host "üìù Creando archivo .env desde env.example..." -ForegroundColor Yellow
    Copy-Item "env.example" ".env"
    Write-Host "‚úÖ Archivo .env creado. Puedes editarlo si es necesario." -ForegroundColor Green
}

# Funci√≥n para mostrar el progreso
function Show-Progress {
    param([string]$Message)
    Write-Host "‚è≥ $Message..." -ForegroundColor Yellow
}

# Funci√≥n para mostrar √©xito
function Show-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

# Funci√≥n para mostrar error
function Show-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# Construir las im√°genes
Show-Progress "Construyendo im√°genes Docker"
try {
    docker-compose build
    Show-Success "Im√°genes construidas correctamente"
} catch {
    Show-Error "Error al construir las im√°genes"
    exit 1
}

# Iniciar los servicios
Show-Progress "Iniciando servicios"
try {
    docker-compose up -d
    Show-Success "Servicios iniciados correctamente"
} catch {
    Show-Error "Error al iniciar los servicios"
    exit 1
}

# Esperar un momento para que los servicios se inicialicen
Show-Progress "Esperando que los servicios se inicialicen"
Start-Sleep -Seconds 10

# Verificar el estado de los contenedores
Show-Progress "Verificando estado de los contenedores"
try {
    $containers = docker-compose ps
    if ($containers -match "Up") {
        Show-Success "Todos los contenedores est√°n ejecut√°ndose"
    } else {
        Show-Error "Algunos contenedores no est√°n ejecut√°ndose"
        Write-Host "üìã Estado de los contenedores:" -ForegroundColor Yellow
        docker-compose ps
        exit 1
    }
} catch {
    Show-Error "Error al verificar el estado de los contenedores"
    exit 1
}

# Mostrar informaci√≥n de acceso
Write-Host ""
Write-Host "üéâ ¬°Backend-Optimizacion est√° listo!" -ForegroundColor Green
Write-Host ""
Write-Host "üì± URLs de acceso:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Aplicaci√≥n principal: http://localhost" -ForegroundColor White
Write-Host "   ‚Ä¢ Admin de Django: http://localhost/admin" -ForegroundColor White
Write-Host "   ‚Ä¢ API REST: http://localhost/api/" -ForegroundColor White
Write-Host ""
Write-Host "üîë Credenciales por defecto:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Superusuario: admin / admin123" -ForegroundColor White
Write-Host "   ‚Ä¢ Base de datos: root / 123456" -ForegroundColor White
Write-Host ""
Write-Host "üìã Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "   ‚Ä¢ Detener servicios: docker-compose down" -ForegroundColor White
Write-Host "   ‚Ä¢ Reiniciar servicios: docker-compose restart" -ForegroundColor White
Write-Host "   ‚Ä¢ Acceder al shell: docker-compose exec web bash" -ForegroundColor White
Write-Host ""
Write-Host "üîç Para ver los logs en tiempo real, ejecuta:" -ForegroundColor Yellow
Write-Host "   docker-compose logs -f" -ForegroundColor White
Write-Host ""
